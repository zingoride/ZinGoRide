
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an admin
    function isAdmin() {
      return request.auth != null && request.auth.uid == 'xMGCQ5b3oic287oK9yTzKSgyTkj2';
    }
    
    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // Helper function to check if the user is part of a chat
    function isUserInChat(chatId) {
      // Matches if the user's UID is at the start or end of the chat ID string
      return request.auth != null && (chatId.matches(request.auth.uid + '_.*') || chatId.matches('.*_' + request.auth.uid));
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Admins can read and write to any user document
      allow read, write: if isAdmin();
      // Users can read and update their own document
      allow get, update: if isOwner(userId);
    }
    
    // Rules for the 'rides' collection
    match /rides/{rideId} {
        // Admins can perform any action
        allow read, write: if isAdmin();
        // Logged-in users can create rides
        allow create: if request.auth != null;
        // The customer who created the ride, or the assigned driver, can read/update it
        allow get, update: if request.auth != null && (isOwner(resource.data.customerId) || (resource.data.driverId != null && isOwner(resource.data.driverId)));
    }
    
    // Rules for chat messages within a ride
    match /rides/{rideId}/messages/{messageId} {
        // Only customer or driver of the ride can read/write messages
        allow read, write: if request.auth != null && (isOwner(get(/databases/$(database)/documents/rides/$(rideId)).data.customerId) || isOwner(get(/databases/$(database)/documents/rides/$(rideId)).data.driverId));
    }
    
    // Rules for general chats between admin and users
    match /chats/{chatId}/messages/{messageId} {
       // Only the admin or a user who is part of the chat can read/write messages
       allow read, write: if isAdmin() || isUserInChat(chatId);
    }

    // Rules for wallet top-up requests
    match /walletRequests/{requestId} {
      // Admins can read and write any request
      allow read, write: if isAdmin();
      // Users can create requests for themselves and read their own requests
      allow create: if request.auth != null && isOwner(request.resource.data.userId);
      allow get: if request.auth != null && isOwner(resource.data.userId);
    }
    
    // Payout requests made by the admin
    match /payoutRequests/{payoutId} {
        // Only admin can create and read payout requests
        allow read, write: if isAdmin();
    }
    
    // General notifications sent by admin
    match /notifications/{notificationId} {
       // Only admin can create and read notifications
       allow read, write: if isAdmin();
    }

    // Manual wallet transactions made by admin
    match /walletTransactions/{transactionId} {
        // Only admin can create and read these transactions
        allow read, write: if isAdmin();
    }
  }
}
