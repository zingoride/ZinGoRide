rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
      // Check if the user making the request has the 'Admin' type.
      // This requires reading the user's own document.
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Admin';
    }
    
    function isUserAuthenticated() {
        return request.auth != null;
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can read public profile info (for ride details)
      // Admins can read everything
      // The user themselves can read their own document
      allow read: if isUserAuthenticated();
      allow update: if isOwner(userId);
      allow create: if isUserAuthenticated();
    }

    // Rules for the 'rides' collection
    match /rides/{rideId} {
      allow read: if isAdmin() || isOwner(resource.data.customerId) || isOwner(resource.data.driverId);
      allow create: if isOwner(request.resource.data.customerId);
      // An admin or the assigned driver can update the ride.
      // A customer can only update the ride to cancel it.
      allow update: if isAdmin() || isOwner(resource.data.driverId) || 
                       (isOwner(resource.data.customerId) && request.resource.data.status == 'cancelled_by_customer');
    }

    // Rules for ride-specific chat messages
    match /rides/{rideId}/messages/{msgId} {
      // The customer or the driver of the ride can read and create messages.
      allow read, create: if isUserAuthenticated() && (
                            request.auth.uid == get(/databases/$(database)/documents/rides/$(rideId)).data.customerId ||
                            request.auth.uid == get(/databases/$(database)/documents/rides/$(rideId)).data.driverId
                          );
    }
    
    // Rules for direct chats (e.g., admin-to-user)
    match /chats/{chatId}/messages/{msgId} {
        // Only the two users involved in the chat can read or write messages.
        allow read, create: if isUserAuthenticated() && request.auth.uid in split(chatId, '_');
    }

    // Rules for wallet top-up requests
    match /walletRequests/{reqId} {
        // Only an admin can read or update wallet requests.
        allow read, update: if isAdmin();
        // A user can only create a wallet request for themselves.
        allow create: if isOwner(request.resource.data.userId);
    }
    
    // Rules for admin payout requests
    match /payoutRequests/{reqId} {
        allow read, create, update, delete: if isAdmin();
    }
    
    // Rules for wallet transactions (admin-only)
    match /walletTransactions/{transactionId} {
      allow read, write: if isAdmin();
    }

    // Rules for application configuration
    match /configs/appConfig {
      // Any authenticated user can read the configuration.
      allow read: if isUserAuthenticated();
      // Only admins can write to the configuration.
      allow write: if isAdmin();
    }
    
    // Rules for advertisements
    match /advertisements/{adId} {
        // Any authenticated user can read advertisements.
        allow read: if isUserAuthenticated();
        // Only admins can manage advertisements.
        allow create, update, delete: if isAdmin();
    }
    
    // Rules for broadcast notifications
    match /notifications/{notificationId} {
      allow read, write: if isAdmin();
    }
  }
}
