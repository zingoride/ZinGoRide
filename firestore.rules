
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      // UID for info@zingoride.vercel.app
      return request.auth.uid == 'xMGCQ5b3oic287oK9yTzKSgyTkj2';
    }

    // Collection Rules

    match /users/{userId} {
      allow read: if isUser(userId) || isAdmin();
      allow write: if isUser(userId) || isAdmin();
      // Allow list for admin only
      allow list: if isAdmin();
    }
    
    match /rides/{rideId} {
      allow read: if isUser(request.resource.data.customerId) || isUser(request.resource.data.driverId) || isAdmin();
      allow write: if isUser(request.resource.data.customerId) || isUser(request.resource.data.driverId) || isAdmin();
      allow list: if isAdmin();
    }

    match /walletRequests/{requestId} {
      allow read: if isUser(request.resource.data.userId) || isAdmin();
      allow create: if isUser(request.resource.data.userId);
      allow update, delete: if isAdmin();
       allow list: if isAdmin();
    }
    
    match /payoutRequests/{requestId} {
      allow read, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow read, list: if isAdmin();
        allow create, update, delete: if isAdmin();
    }
    
    match /chats/{chatId}/{message=**} {
      allow read, write: if isUser(request.auth.uid) && request.auth.uid.matches(chatId) || isAdmin();
    }
    
    match /walletTransactions/{transactionId} {
       allow read: if isUser(request.resource.data.userId) || isAdmin();
       allow create: if isUser(request.resource.data.userId) || isAdmin();
       allow list: if isAdmin();
    }
    
    // Auto-generated index for wallet requests
    // This allows admins to query and order requests by date.
    match /walletRequests/{requestId} {
      // Existing rules...
    }
  }
}
