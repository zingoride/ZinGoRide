
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user has an 'admin' role (requires custom claims)
    // For this prototype, we'll assume any logged-in user can be an admin for their actions.
    // In a real app, you would set a custom claim: request.auth.token.admin == true
    function isAdmin() {
      // THIS IS INSECURE FOR PRODUCTION. Replace with custom claims check.
      return isSignedIn();
    }

    // USERS can only be read/written by their owner or an admin.
    match /users/{userId} {
      allow read, update: if isSignedIn() && (isOwner(userId) || isAdmin());
      // Anyone can create their own user account during signup
      allow create: if isSignedIn();
    }
    
    // RIDES
    match /rides/{rideId} {
        // Customer can create a ride request
        allow create: if isSignedIn() && request.resource.data.customerId == request.auth.uid;
        
        // Only the assigned driver, customer, or an admin can read the ride details
        allow read: if isSignedIn() && (
                      resource.data.customerId == request.auth.uid || 
                      resource.data.driverId == request.auth.uid ||
                      isAdmin()
                    );
        
        // Updating rules:
        // - Customer can cancel their own ride.
        // - A driver can accept a ride (update with their ID).
        // - The assigned driver can update the status (start, complete, cancel).
        // - Admin can update anything.
        allow update: if isSignedIn() && (
                        (request.resource.data.status == 'cancelled_by_customer' && resource.data.customerId == request.auth.uid) ||
                        (resource.data.driverId == null && request.resource.data.driverId == request.auth.uid) ||
                        (resource.data.driverId == request.auth.uid) ||
                        isAdmin()
                      );
    }
    
    // CHATS & MESSAGES
    match /chats/{chatId}/{message=**} {
      // Participants of the chat (identified by the chatId format userId1_userId2) or admin can read/write
      allow read, write: if isSignedIn() && (request.auth.uid in chatId.split('_') || isAdmin());
    }
    
    // WALLET REQUESTS can be created by users, but only read/updated by admin
    match /walletRequests/{requestId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow read, update, delete: if isAdmin();
    }
    
    // PAYOUT REQUESTS can only be managed by admin
    match /payoutRequests/{requestId} {
       allow read, create, update, delete: if isAdmin();
    }
  }
}
