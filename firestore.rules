
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isAdmin() {
      return isSignedIn() && getUserData(request.auth.uid).type == 'Admin';
    }

    function isDriver() {
      return isSignedIn() && getUserData(request.auth.uid).type == 'Driver';
    }

    function isCustomer() {
      return isSignedIn() && getUserData(request.auth.uid).type == 'Customer';
    }
    
    function isBookingRide(newData) {
    	return newData.status == 'booked' && newData.vehicleType in ['Car', 'Bike', 'Rickshaw'] && newData.fare > 0;
    }
    
    function isAcceptingRide(newData) {
    	return newData.status == 'accepted' && newData.driverId == request.auth.uid;
    }
    
    function isStartingRide(newData) {
    	return newData.status == 'in_progress';
    }
    
    function isCompletingRide(newData) {
    	return newData.status == 'completed';
    }
    
    function isCancellingRide(newData, userType) {
    	return newData.status == 'cancelled_by_' + userType;
    }
    
    function isUpdatingFeedback(newData) {
    	return newData.rating > 0 || newData.tip >= 0 || newData.feedback != null;
    }

    // Collection Rules
    match /users/{userId} {
      allow read: if isSignedIn(); // Allow any signed-in user to read basic public data
      allow update: if isOwner(userId) || isAdmin(); // Allow user to update their own profile, or admin
      allow create, delete: if isAdmin(); // Only admin can create or delete users
    }

    match /rides/{rideId} {
      // ANY logged in user can create a ride request.
      allow create: if isSignedIn();
      
      // ANYONE can read a ride document - this should be locked down in production.
      allow read: if isSignedIn();
      
      allow update: if 
      	// Customer is booking the vehicle type and fare
        (isOwner(request.resource.data.customerId) && isBookingRide(request.resource.data)) ||
        // Customer is cancelling
        (isOwner(request.resource.data.customerId) && isCancellingRide(request.resource.data, 'customer')) ||
        // Customer is leaving feedback
        (isOwner(request.resource.data.customerId) && isUpdatingFeedback(request.resource.data)) ||
        // Driver is accepting
        (isDriver() && isAcceptingRide(request.resource.data)) ||
        // Driver is starting
        (isOwner(request.resource.data.driverId) && isStartingRide(request.resource.data)) ||
        // Driver is completing
        (isOwner(request.resource.data.driverId) && isCompletingRide(request.resource.data)) ||
        // Driver is cancelling
        (isOwner(request.resource.data.driverId) && isCancellingRide(request.resource.data, 'driver')) ||
        // Admin can do anything
        isAdmin();

      allow delete: if isAdmin();
      
      match /messages/{messageId} {
        allow read, write: if isSignedIn() && (isOwner(get(/databases/$(database)/documents/rides/$(rideId)).data.customerId) || isOwner(get(/databases/$(database)/documents/rides/$(rideId)).data.driverId)) || isAdmin();
      }
    }
    
    match /configs/{docId} {
    	allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /advertisements/{adId} {
    	allow read: if isSignedIn();
      allow write: if isAdmin();
    }
    
    match /walletRequests/{reqId} {
    	allow read: if isSignedIn();
      allow create: if isOwner(request.resource.data.userId);
      allow update, delete: if isAdmin();
    }

    match /payoutRequests/{reqId} {
        allow read, write: if isAdmin();
    }
    
    match /notifications/{notifId} {
    	 allow read, write: if isAdmin();
    }
    
    match /walletTransactions/{transId} {
    	allow read, write: if isAdmin();
    }
  }
}
