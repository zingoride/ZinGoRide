rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is an admin
    // In a real app, you'd check a custom claim set via a backend.
    function isAdmin() {
      // For this prototype, we'll assume a specific UID is the admin.
      // Replace 'ADMIN_UID' with the actual admin user's UID from Firebase Auth.
      return request.auth.uid == 'REPLACE_WITH_YOUR_ADMIN_UID';
    }

    // Helper function to check if a user is a driver
    function isDriver() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Driver';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Allow a user to read their own document.
      // Allow an admin to read any user document.
      // Allow a driver to read other users' location for map functionality.
      allow read: if request.auth.uid == userId 
                    || isAdmin() 
                    || (isDriver() && 'location' in resource.data);
      
      // Allow a user to create their own document and update their own document.
      // Allow an admin to update any user document.
      allow create, update: if request.auth.uid == userId || isAdmin();

      // Prevent users from deleting their accounts directly from the client.
      allow delete: if false;
    }

    // Rules for the 'rides' collection
    match /rides/{rideId} {
      // Any authenticated user can create a ride request.
      allow create: if request.auth != null;

      // The customer who created it, the assigned driver, or an admin can read it.
      allow read: if request.auth != null && (request.auth.uid == resource.data.customerId 
                    || request.auth.uid == resource.data.driverId 
                    || isAdmin());

      // The assigned driver or an admin can update the ride.
      // The customer can only update it to cancel it.
      allow update: if request.auth != null && (request.auth.uid == resource.data.driverId 
                      || isAdmin() 
                      || (request.auth.uid == resource.data.customerId && request.resource.data.status == 'cancelled_by_customer'));

      // No one can delete a ride from the client.
      allow delete: if false;
      
       // Chat messages within a ride
      match /messages/{messageId} {
        allow read, create: if request.auth.uid == resource.data.senderId
                            || request.auth.uid == get(/databases/$(database)/documents/rides/$(rideId)).data.customerId
                            || request.auth.uid == get(/databases/$(database)/documents/rides/$(rideId)).data.driverId;
      }
    }
    
    // Rules for chat between admin and users
    match /chats/{chatId}/messages/{messageId} {
        allow read, write: if request.auth != null && (request.auth.uid in chatId.split('_') || isAdmin());
    }

    // Rules for wallet top-up requests
    match /walletRequests/{requestId} {
      // Any authenticated user can create a request.
      allow create: if request.auth != null;

      // Only the user who created it or an admin can read it.
      allow read: if request.auth != null && (request.auth.uid == resource.data.userId || isAdmin());

      // Only an admin can update (approve/reject) a request.
      allow update: if isAdmin();
      
      allow delete: if false;
    }
    
     // Rules for payout requests
    match /payoutRequests/{payoutId} {
      // Only an admin can create/read payout requests.
      allow read, create: if isAdmin();
      // Allow update for status changes
      allow update: if isAdmin();
      allow delete: if false;
    }

    // Rules for broadcast notifications
    match /notifications/{notificationId} {
        // Only admin can read/write notifications history
        allow read, write: if isAdmin();
    }
  }
}
