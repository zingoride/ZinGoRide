
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    function isDriver() {
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Driver';
    }

    function isAdmin() {
      // Allow if the user is the designated Super Admin
      if (request.auth.uid == 'xMGCQ5b3oic287oK9yTzKSgyTkj2') {
        return true;
      }
      // Also allow if the user has an "Admin" type in their user document.
      return request.auth != null && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Admin';
    }

    // Collection: users
    match /users/{userId} {
      // Anyone authenticated can create their own user document
      allow create: if isOwner(userId);

      // Anyone authenticated can read basic info of any user (for profiles, ride details)
      allow read: if request.auth != null;

      // Users can only update their own profile. Admin can update any.
      allow update: if isOwner(userId) || isAdmin();
      
      // Nobody can delete user accounts from the client.
      allow delete: if false;
    }

    // Collection: rides
    match /rides/{rideId} {
      // An authenticated user can create a ride request for themselves.
      allow create: if request.auth != null && isOwner(request.resource.data.customerId);

      // Only the customer who owns the ride, the assigned driver, or an admin can read the ride details.
      allow read: if request.auth != null && (isOwner(resource.data.customerId) || isOwner(resource.data.driverId) || isAdmin());

      // Complex update logic for different stages of a ride.
      allow update: if 
        // Case 1: Customer booking the ride (setting vehicle, fare)
        (isOwner(resource.data.customerId) && request.resource.data.status == 'booked') ||
        // Case 2: Customer cancelling their own ride
        (isOwner(resource.data.customerId) && request.resource.data.status == 'cancelled_by_customer') ||
        // Case 3: Driver accepting a ride
        (isDriver() && resource.data.driverId == null && request.resource.data.driverId == request.auth.uid) ||
        // Case 4: Assigned driver updating the status (start, complete, cancel)
        (isOwner(resource.data.driverId) && (
            request.resource.data.status == 'in_progress' ||
            request.resource.data.status == 'completed' ||
            request.resource.data.status == 'cancelled_by_driver'
        )) ||
        // Case 5: Admin can update anything.
        isAdmin();
      
      // No one can delete a ride document from client.
      allow delete: if false;

      // Subcollection: messages (for chat)
      match /messages/{messageId} {
        // Only the customer or driver of the ride can read/write messages.
        allow read, write: if request.auth != null && (isOwner(get(/databases/$(database)/documents/rides/$(rideId)).data.customerId) || isOwner(get(/databases/$(database)/documents/rides/$(rideId)).data.driverId));
      }
    }
    
    // Collection: chats (for admin-user chat)
    match /chats/{chatId} {
        match /messages/{messageId} {
            allow read, write: if request.auth != null && (request.auth.uid in chatId.split('_'));
        }
    }

    // Admin-only collections
    match /advertisements/{docId} {
      allow read, write, delete: if isAdmin();
    }
    
    match /payoutRequests/{docId} {
      allow read, write: if isAdmin();
    }

    match /notifications/{docId} {
        allow read, write: if isAdmin();
    }
    
    match /configs/{docId} {
      allow read: if request.auth != null; // All users can read configs
      allow write: if isAdmin(); // Only admin can change configs
    }

    // Collection: walletRequests
    match /walletRequests/{reqId} {
        // User can create their own request
        allow create: if isOwner(request.resource.data.userId);
        // Only admin can read/update/delete these requests
        allow read, update, delete: if isAdmin();
    }
  }
}
