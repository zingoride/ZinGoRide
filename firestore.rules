rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isUser(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isAdmin() {
      // UID for the admin user
      return isUserAuthenticated() && request.auth.uid == 'xMGCQ5b3oic287oK9yTzKSgyTkj2';
    }
    
    function isUserInChat(chatId) {
        // A chat ID is formed by "userId1_userId2"
        // This rule ensures the authenticated user's ID is part of the chat ID string.
        return isUserAuthenticated() && string(chatId).matches('.*' + request.auth.uid + '.*');
    }

    // Collection: users
    match /users/{userId} {
      allow get: if isUserAuthenticated();
      allow list: if isAdmin();
      // Allow user creation for anyone (signup)
      allow create: if true; 
      // Allow users to update their own data, or admin to update any user
      allow update: if isUser(userId) || isAdmin();
      allow delete: if isAdmin();
    }
    
    // Collection: rides
    match /rides/{rideId} {
        // An admin can read/write any ride document
        allow read, write: if isAdmin();
        
        // A customer can create a ride for themselves
        allow create: if isUser(request.resource.data.customerId);
        
        // Any authenticated user involved in the ride can get or update it
        allow get, update: if isUserAuthenticated() && (isUser(resource.data.customerId) || isUser(resource.data.driverId));
        
        match /messages/{messageId} {
            // A user can read/write messages in a ride they are part of
            allow read, write: if isUserAuthenticated() && (isUser(get(/databases/$(database)/documents/rides/$(rideId)).data.customerId) || isUser(get(/databases/$(database)/documents/rides/$(rideId)).data.driverId));
        }
    }

    // Collection: walletRequests
    match /walletRequests/{requestId} {
        // Admin has full access
        allow read, write: if isAdmin();
        // Users can create requests for themselves
        allow create: if isUser(request.resource.data.userId);
    }
    
    // Collection: payoutRequests
     match /payoutRequests/{payoutId} {
        // Only admin can manage payout requests
        allow read, write: if isAdmin();
    }
    
    // Collection: notifications
    match /notifications/{notificationId} {
        // Only admin can manage notifications
        allow read, write: if isAdmin();
    }
    
    // Collection: chats (for admin-user communication)
    match /chats/{chatId} {
        allow read, write: if isAdmin() || isUserInChat(chatId);
        
        match /messages/{messageId} {
           allow read, write: if isAdmin() || isUserInChat(chatId);
        }
    }
  }
}
