rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Check if a user ID matches the authenticated user's ID
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Check if the authenticated user is an Admin
    function isAdmin() {
      return request.auth != null && exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Admin';
    }

    // Admins have full read/write access to the entire database.
    // This rule must come first to grant them universal access.
    match /{document=**} {
      allow read, write: if isAdmin();
    }
    
    // Users Collection
    match /users/{userId} {
      // Any authenticated user can create their own user document (on signup)
      allow create: if request.auth != null;
      // Users can only read or update their own document.
      allow read, update: if isOwner(userId);
    }

    // Rides Collection
    match /rides/{rideId} {
      // A customer can create a new ride request for themselves.
      allow create: if request.auth != null && request.resource.data.customerId == request.auth.uid;
      // The assigned customer or driver can read the ride details.
      allow read: if request.auth != null && (request.resource.data.customerId == request.auth.uid || request.resource.data.driverId == request.auth.uid);
      // The driver can accept the ride (update), and both can update it during its lifecycle (e.g., status changes).
      allow update: if request.auth != null && (request.resource.data.customerId == request.auth.uid || request.resource.data.driverId == request.auth.uid);
    }

    // Wallet Requests Collection
    match /walletRequests/{requestId} {
      // A user can create a wallet request for themselves.
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      // Only the user who made the request can view it.
      allow read: if request.auth != null && request.resource.data.userId == request.auth.uid;
    }

    // Configs, Advertisements, Notifications, etc. are Admin-only
    // The first global admin rule already covers this, so no more specific rules are needed.
    // Any other collection not specified above will fall back to the default deny, except for Admins.
  }
}
