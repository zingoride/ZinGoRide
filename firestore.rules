
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Rules for 'users' collection
    match /users/{userId} {
      allow read, update, delete: if isOwner(userId);
      allow create: if request.auth != null;
    }
    
    // Rules for 'rides' collection
    match /rides/{rideId} {
      allow read, write: if request.auth != null;
    }

    // Rules for 'advertisements' collection
    match /advertisements/{adId} {
      allow read: if true;
      allow write: if request.auth != null; // Allow admin to write
    }
    
    // Rules for 'payoutRequests' collection
    match /payoutRequests/{payoutId} {
        allow read, write: if request.auth != null; // Allow admin to manage
    }
    
    // Rules for 'walletRequests' collection
    match /walletRequests/{reqId} {
       allow read, write: if request.auth != null;
    }
    
    // Rules for 'walletTransactions' collection
    match /walletTransactions/{transactionId} {
      allow read, write: if request.auth != null;
    }

    // Rules for 'configs' collection
    match /configs/{configId} {
      allow read: if true;
      allow write: if request.auth != null; // Allow admin to write
    }
    
    // Rules for chat messages within rides
    match /rides/{rideId}/messages/{messageId} {
      allow read, write: if request.auth != null; // Basic rule: only authenticated users can chat
    }
    
     // Rules for general chat messages between users
    match /chats/{chatId}/messages/{messageId} {
      allow read, write: if request.auth != null && chatId.split('_').hasAny([request.auth.uid]);
    }
  }
}
