rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Users Collection
    match /users/{userId} {
      // Allow user to read and write their own data
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      // Allow authenticated users to create their own user document
      allow create: if request.auth != null;
    }
    
    // Rides Collection
    match /rides/{rideId} {
       // Anyone can create a ride request if they are logged in
       allow create: if request.auth != null;
       
       // Allow customer or assigned driver to read the ride details
       allow read: if request.auth != null && (request.auth.uid == resource.data.customerId || request.auth.uid == resource.data.driverId);
       
       // Allow customer to cancel, driver to accept/update status
       allow update: if request.auth != null && (
         (request.auth.uid == resource.data.customerId && request.resource.data.status == 'cancelled_by_customer') ||
         (request.auth.uid == request.resource.data.driverId)
       );
    }
    
    // Messages sub-collection within a ride
    match /rides/{rideId}/messages/{messageId} {
       // Only customer or driver of the ride can read/write messages
       allow read, create: if request.auth != null && (request.auth.uid == get(/databases/$(database)/documents/rides/$(rideId)).data.customerId || request.auth.uid == get(/databases/$(database)/documents/rides/$(rideId)).data.driverId);
    }
    
    // Generic chat collection (for admin-user chats)
    match /chats/{chatId}/messages/{messageId} {
        // Only members of the chat can read/write
        allow read, create: if request.auth != null && request.auth.uid in chatId.split('_');
    }

    // Wallet Requests
    match /walletRequests/{requestId} {
        // User can create their own request
        allow create: if request.auth != null && request.auth.uid == request.resource.data.userId;
        // User can read their own requests
        allow read: if request.auth != null && request.auth.uid == resource.data.userId;
        // No user can update/delete a request. This must be done by an admin.
        allow update, delete: if false;
    }
    
    // Payout Requests
    match /payoutRequests/{payoutId} {
      // For now, deny all client-side access. To be handled by admin or cloud functions.
      allow read, write: if false;
    }
    
    // Notifications (Admin-only write)
    match /notifications/{notificationId} {
       allow read: if request.auth != null;
       allow write: if false; // Should be written by admin backend only
    }

    // Default deny all other collections
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
