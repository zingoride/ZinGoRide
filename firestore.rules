rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isUser(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }
    
    function isDriver() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Driver';
    }

    function isAdmin() {
      return isSignedIn() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Admin';
    }

    // USER-SPECIFIC HELPER FUNCTIONS
    function isOwner(userId) {
      return isUser(userId);
    }
    
    // RIDE-SPECIFIC HELPER FUNCTIONS
    function isRideOwner(rideData) {
      return isOwner(rideData.customerId);
    }
    
    function isRideDriver(rideData) {
      return isSignedIn() && request.auth.uid == rideData.driverId;
    }
    
    function isBookingRide(rideData, nextRideData) {
       return rideData.status == 'pending' && nextRideData.status == 'booked' && isRideOwner(rideData);
    }
    
    function isAcceptingRide(rideData, nextRideData) {
      return rideData.status == 'booked' && nextRideData.status == 'accepted' && isDriver();
    }
    
    function isStartingRide(rideData, nextRideData) {
      return rideData.status == 'accepted' && nextRideData.status == 'in_progress' && isRideDriver(rideData);
    }
    
    function isCompletingRide(rideData, nextRideData) {
      return rideData.status == 'in_progress' && nextRideData.status == 'completed' && isRideDriver(rideData);
    }
    
    function isCancelling(rideData, nextRideData) {
      let isCustomerCancel = nextRideData.status == 'cancelled_by_customer' && isRideOwner(rideData);
      let isDriverCancel = nextRideData.status == 'cancelled_by_driver' && isRideDriver(rideData);
      return isCustomerCancel || isDriverCancel;
    }
    
    function isSubmittingFeedback(rideData, nextRideData) {
       return isRideOwner(rideData) && rideData.status == 'completed' && nextRideData.tip is number && nextRideData.rating is number;
    }
    

    // COLLECTION RULES
    match /users/{userId} {
      // Anyone can read basic profile info for drivers/customers
      allow read: if isSignedIn();
      
      // Only the user themselves or an admin can update their profile
      allow update: if isUser(userId) || isAdmin();

      // Only an admin can create or delete a user document directly
      allow create, delete: if isAdmin();
    }
    
    match /rides/{rideId} {
      // A ride can be created by any signed-in user
      allow create: if isSignedIn();
      
      // Read access is granted to the customer, the assigned driver, or any admin
      allow read: if isRideOwner(resource.data) || isRideDriver(resource.data) || isAdmin();
      
      // Update rules are more complex
      allow update: if isBookingRide(resource.data, request.resource.data) ||
                       isAcceptingRide(resource.data, request.resource.data) ||
                       isStartingRide(resource.data, request.resource.data) ||
                       isCompletingRide(resource.data, request.resource.data) ||
                       isCancelling(resource.data, request.resource.data) ||
                       isSubmittingFeedback(resource.data, request.resource.data) ||
                       isAdmin();
      
      // No one can delete a ride document to preserve history
      allow delete: if false;

      // Subcollection for chat messages within a ride
      match /messages/{msgId} {
        allow read, create: if isRideOwner(get(/databases/$(database)/documents/rides/$(rideId)).data) || 
                               isRideDriver(get(/databases/$(database)/documents/rides/$(rideId)).data) ||
                               isAdmin();
      }
    }
    
    match /chats/{chatId}/messages/{msgId} {
        allow read, create: if isSignedIn() && (request.auth.uid in get(/databases/$(database)/documents/chats/$(chatId)).data.participants);
    }
    
    match /configs/{docId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /advertisements/{adId} {
      allow read: if true;
      allow write: if isAdmin();
    }
    
    match /walletRequests/{reqId} {
      allow create: if isSignedIn();
      allow read, update: if isAdmin();
    }

    match /payoutRequests/{payoutId} {
        allow create, read, update, delete: if isAdmin();
    }
    
    match /notifications/{notificationId} {
        allow create, read: if isAdmin();
    }
  }
}