
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isUserAuthenticated() {
      return request.auth != null;
    }

    function isExistingUser(userId) {
      return exists(/databases/$(database)/documents/users/$(userId));
    }
    
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }

    function isRequestingUser(userId) {
      return isUserAuthenticated() && request.auth.uid == userId;
    }

    function isUserType(userId, userType) {
      return getUserData(userId).type == userType;
    }

    function isAdmin(userId) {
      return isUserAuthenticated() && isUserType(userId, 'Admin');
    }

    function isRideParticipant(ride) {
      return isUserAuthenticated() && (request.auth.uid == ride.data.customerId || request.auth.uid == ride.data.driverId);
    }

    // User profiles
    match /users/{userId} {
      allow read: if isUserAuthenticated();
      allow create: if isUserAuthenticated();
      allow update: if isRequestingUser(userId) || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);
    }
    
    // Ride documents
    match /rides/{rideId} {
      allow create: if isUserAuthenticated();
      allow read: if isRideParticipant(resource) || isAdmin(request.auth.uid);
      allow update: if isRideParticipant(resource) || isAdmin(request.auth.uid);
      allow delete: if isAdmin(request.auth.uid);

      // Chat messages within a ride
      match /messages/{messageId} {
        allow read, write: if isRideParticipant(get(/databases/$(database)/documents/rides/$(rideId)));
      }
    }
    
    // General app configuration
    match /configs/{docId} {
      allow read: if true;
      allow write: if isAdmin(request.auth.uid);
    }
    
    // Advertisements
    match /advertisements/{adId} {
        allow read: if true;
        allow create, update, delete: if isAdmin(request.auth.uid);
    }
    
    // Wallet top-up requests
    match /walletRequests/{reqId} {
        allow create: if isUserAuthenticated();
        allow read, update, delete: if isAdmin(request.auth.uid);
    }
    
     // Payout requests for admin/company
    match /payoutRequests/{payoutId} {
      allow create, read, update, delete: if isAdmin(request.auth.uid);
    }
    
    // Wallet transactions (records of fund movements)
    match /walletTransactions/{transactionId} {
      // Only backend/admin can create these records
      allow create: if isAdmin(request.auth.uid);
      // Users can read their own transactions, admins can read all
      allow read: if isRequestingUser(resource.data.userId) || isAdmin(request.auth.uid);
      allow update, delete: if false; // Transactions should be immutable
    }

    // Chat documents for admin-user communication
    match /chats/{chatId} {
       // Only participants can read/write
      allow read, write: if isUserAuthenticated() && request.auth.uid in chatId.split('_');

      match /messages/{messageId} {
         // Only participants can read/write messages
         allow read, write: if isUserAuthenticated() && request.auth.uid in chatId.split('_');
      }
    }
  }
}
