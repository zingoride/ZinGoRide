
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Admin';
    }

    // Default deny all
    match /{document=**} {
      allow read, write: if false;
    }

    // Users Collection
    match /users/{userId} {
      allow read: if request.auth != null && (isOwner(userId) || isAdmin());
      allow create: if request.auth != null;
      allow update: if request.auth != null && isOwner(userId);
      allow delete: if request.auth != null && isAdmin();
    }
    
    // Rides Collection
    match /rides/{rideId} {
      allow read, write: if request.auth != null;
    }
    
    // Configs Collection
    match /configs/{configId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin();
    }
    
    // Advertisements Collection
    match /advertisements/{adId} {
        allow read: if true;
        allow write: if request.auth != null && isAdmin();
    }
    
    // Payout Requests Collection
    match /payoutRequests/{payoutId} {
        allow read, write: if request.auth != null && isAdmin();
    }
    
    // Wallet Requests Collection
    match /walletRequests/{requestId} {
        allow read, write: if request.auth != null;
    }
    
    // Wallet Transactions Collection
    match /walletTransactions/{transactionId} {
        allow read, write: if request.auth != null;
    }
    
    // Notifications Collection
     match /notifications/{notificationId} {
        allow read, write: if request.auth != null && isAdmin();
    }
    
    // Chat messages (subcollection)
    match /rides/{rideId}/messages/{messageId} {
        allow read, write: if request.auth != null;
    }
    
     // General Chat messages (subcollection)
    match /chats/{chatId}/messages/{messageId} {
        allow read, write: if request.auth != null;
    }
  }
}
