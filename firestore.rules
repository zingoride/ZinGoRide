
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isOwner(userId) {
      return request.auth.uid == userId;
    }
    
    function isAdmin() {
      return isAuth() && get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Admin';
    }
    
    // USERS: Can only be read/written by the owner or an admin.
    match /users/{userId} {
      allow read, write: if isOwner(userId) || isAdmin();
    }
    
    // RIDES: Complex logic
    match /rides/{rideId} {
      // READ: Any authenticated user can query/read rides. 
      // The app's front-end logic is responsible for filtering which rides to show 
      // (e.g., drivers only see 'booked' rides, customers only see their own ride).
      // This is necessary to allow collection-level queries by drivers.
      allow read: if isAuth();

      // CREATE: Only authenticated customers can create rides for themselves.
      allow create: if isAuth() && request.resource.data.customerId == request.auth.uid && request.resource.data.type == 'Customer';
      
      // UPDATE:
      // - The assigned driver can update (e.g., to 'in_progress', 'completed').
      // - The customer who owns the ride can update (e.g., to 'cancelled_by_customer').
      // - An admin can update.
      allow update: if (isAuth() && (request.auth.uid == resource.data.driverId || request.auth.uid == resource.data.customerId)) || isAdmin();

      // DELETE: Only admins can delete rides.
      allow delete: if isAdmin();
    }

    // ADMIN-ONLY: All other collections can only be accessed by admins.
    match /{collection}/{docId} {
      allow read, write, delete: if collection not in ['users', 'rides'] && isAdmin();
    }
  }
}
