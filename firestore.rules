
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Users can read/update their own data. Admins can read any user's data.
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      // Further rules can be added for admin access if an admin role is defined.
    }

    // Rides can be created by any authenticated user.
    // They can be read/updated by the customer who created it or the driver who accepted it.
    match /rides/{rideId} {
      allow create: if request.auth != null;
      allow read, update: if request.auth != null && (request.auth.uid == resource.data.customerId || request.auth.uid == resource.data.driverId);
    }

    // Wallet requests can be created by any authenticated user.
    // They should only be read/updated by admins (not implemented yet, but good practice).
    match /walletRequests/{requestId} {
      allow create: if request.auth != null;
      // For now, deny read/update to prevent users from seeing each other's requests.
      // Admin panel would use admin credentials to bypass this.
      allow read, update: if false;
    }

    // Payout requests (assuming only admins/drivers with specific roles create this)
    // This example assumes only the user themselves can create and read their own requests.
    match /payoutRequests/{payoutId} {
       allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
       allow read: if request.auth != null && resource.data.userId == request.auth.uid;
       // Updates would be handled by an admin role
       allow update: if false;
    }

    // Chat messages can be read/written by the customer or driver of that ride.
    // Or by the two participants of a direct chat.
    match /rides/{rideId}/messages/{messageId} {
      allow read, create: if request.auth != null && (get(/databases/$(database)/documents/rides/$(rideId)).data.customerId == request.auth.uid || get(/databases/$(database)/documents/rides/$(rideId)).data.driverId == request.auth.uid);
    }
    
    match /chats/{chatId}/messages/{messageId} {
      // Chat participants are stored in the chatId, e.g., "userId1_userId2"
      allow read, create: if request.auth != null && request.auth.uid in chatId.split('_');
    }

    // Notifications are write-only for server-side actions, no client access.
    match /notifications/{notificationId} {
      allow read, write: if false;
    }
  }
}
