rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if the requesting user is an Admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Admin';
    }

    // Rules for the 'users' collection
    match /users/{userId} {
      // Any authenticated user can create their own account
      allow create: if request.auth != null;
      
      // Users can read their own document, Admins can read any document
      allow get, list: if request.auth.uid == userId || isAdmin();
      
      // Users can update their own document, Admins can update any document
      allow update: if request.auth.uid == userId || isAdmin();
      
      // Only admins can delete a user (for future implementation)
      allow delete: if isAdmin();
    }

    // Rules for ride-related data
    match /rides/{rideId} {
      // Any authenticated user can create a ride
      allow create: if request.auth != null;
      
      // Only the customer, the assigned driver, or an admin can read ride details
      allow get, list: if request.auth != null && (request.auth.uid == resource.data.customerId || request.auth.uid == resource.data.driverId || isAdmin());
      
      // Only the customer, the assigned driver, or an admin can update the ride
      allow update: if request.auth != null && (request.auth.uid == resource.data.customerId || request.auth.uid == resource.data.driverId || isAdmin());
    }

    // Rules for chat messages within a ride or a chat
    match /rides/{rideId}/messages/{messageId} {
        allow read, create: if request.auth != null; // Simplified for now
    }
    match /chats/{chatId}/messages/{messageId} {
        allow read, create: if request.auth != null; // Simplified for now
    }

    // Rules for wallet top-up requests
    match /walletRequests/{requestId} {
        // Authenticated users can create requests, admins can read/update them
        allow create: if request.auth != null;
        allow read, update: if isAdmin();
    }
    
    // Rules for wallet transactions (admin-only action)
    match /walletTransactions/{transactionId} {
        allow read, create: if isAdmin();
    }

    // Rules for payout requests (admin-only action)
    match /payoutRequests/{payoutId} {
        allow read, create, update: if isAdmin();
    }

    // Rules for advertisements
    match /advertisements/{adId} {
      // Anyone can read active ads
      allow get, list: if true;
      // Only admins can create, update, or delete ads
      allow create, update, delete: if isAdmin();
    }
    
    // Rules for broadcast notifications (admin-only)
    match /notifications/{notificationId} {
        allow read, create: if isAdmin();
    }

    // Rules for application configuration
    match /configs/appConfig {
      // Anyone can read the application configuration
      allow get: if true;
      // Only admins can update the configuration
      allow update: if isAdmin();
    }
  }
}
