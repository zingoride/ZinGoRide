rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is an Admin
    function isAdmin() {
      return exists(/databases/$(database)/documents/users/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.type == 'Admin';
    }

    // Users Collection
    match /users/{userId} {
      // Any authenticated user can create their own user document
      allow create: if request.auth.uid != null;
      
      // A user can read or update their own document.
      // An admin can get any user's document.
      allow get, list: if request.auth.uid == userId || isAdmin();
      allow update: if request.auth.uid == userId || isAdmin();
      
      // No one can delete user documents for now to maintain data integrity
      allow delete: if false;
    }

    // Rides Collection
    match /rides/{rideId} {
        // Only authenticated users can create rides.
        allow create: if request.auth.uid != null;
        
        // The customer who created it, the assigned driver, or an admin can read/update it.
        allow read, update: if request.auth.uid == resource.data.customerId 
                               || request.auth.uid == resource.data.driverId
                               || isAdmin();
        
        // Only admin can delete ride history
        allow delete: if isAdmin();
        
        match /messages/{messageId} {
            allow read, create: if request.auth.uid == get(/databases/$(database)/documents/rides/$(rideId)).data.customerId ||
                                request.auth.uid == get(/databases/$(database)/documents/rides/$(rideId)).data.driverId ||
                                isAdmin();
        }
    }
    
    // Chats Collection (for admin-user chat)
    match /chats/{chatId}/messages/{messageId} {
        // Any authenticated user can read/write to a chat they are a part of.
        // This is a simplified rule; for production, you'd verify if the user's ID is in the chatId.
        allow read, write: if request.auth.uid != null || isAdmin();
    }
    
    // Wallet Requests
    match /walletRequests/{requestId} {
        allow create: if request.auth.uid != null;
        allow read, update, delete: if isAdmin();
    }
    
    // Advertisements
    match /advertisements/{adId} {
        allow read: if request.auth.uid != null; // Anyone logged in can see ads
        allow create, update, delete: if isAdmin(); // Only admin can manage ads
    }
    
    // Payout Requests
    match /payoutRequests/{payoutId} {
        // Only admin can create, read, or manage payouts
        allow read, create, update, delete: if isAdmin();
    }
    
    // Notifications
    match /notifications/{notificationId} {
        allow read, create: if isAdmin();
    }
    
    // App Config
    match /configs/{configId} {
      allow get: if true; // Everyone can read config
      allow create, update, delete: if isAdmin(); // Only admin can change config
    }
  }
}
